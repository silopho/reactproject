// –ò–º–ø–æ—Ä—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å
import { useContext, useRef, useState } from "react";
import { useParams } from "react-router-dom";
import { usePostContext } from "../../contexts/likedPostsContext";

import { usePostById } from "../../hooks/usePostById";
import { Loading } from "../../shared/Loading/Loading";
import { IPost } from "../../shared/types/types";

import "./PostPage.css";

export function PostPage() {
	const params = useParams();
	const { post, isLoading, error } = usePostById(Number(params.id));

	const [likes, setLikes] = useState(0);
	// —Ç–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ —Å PostCard
	const [likedId, setLikedId] = useState<string>("postLikeButton");

	const { likedPosts, addToLikedPosts, removeFromLikedPosts, isLiked } =
		usePostContext();

	// –ò–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
	// –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ª—É—á—à–µ –∑–∞–¥—É–º–∞—Ç—Å—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ButtonLike
	// –í –Ω–µ–º –±—É–¥–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –ª–∞–π–∫–æ–º –∫–Ω–æ–ø–∫–∏
	function incrementLikes(post: IPost) {
		if (isLiked(post.id)) {
			if (likedPosts) {
				removeFromLikedPosts(post.id);
			}
			setLikes(likes - 1);
			setLikedId("postLikeButton");
			console.log(likedPosts);
		} else {
			setLikes(likes + 1);
			setLikedId("postLikedButton");
			console.log(likedPosts);
			if (likedPosts) {
				addToLikedPosts(post);
			}
		}
	}

	return (
		// –Ω–µ –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤—ã–µ —Ç–∞–±—É–ª—è—Ü–∏–∏, –¥–µ–ª–∞–π –ª—É—á—à–µ —Ç–∞–∫
		isLoading === true ? (
			<div id="loadingCont">
				<Loading />
			</div>
		) : !error ? (
			<div id="postPageCont">
                {/* –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –ª–∏–±–æ —É–∫–∞–∑–∞—Ç—å user'–∞ */}
				<p id="postPageAuthor">{}</p>
				<img id="postPageImg" src={post?.image ?? undefined} alt="" />
				<div id="postLikes">
					<button
						id={likedId}
						onClick={() => {
							post && incrementLikes(post);
						}}
					>
						üëç
					</button>
					<p>–õ–∞–π–∫–∏: {likes}</p>
				</div>
				<p id="postPageDesc">{post?.text}</p>
			</div>
		) : (
			<p id="error">{error}</p>
		)
	);
}
